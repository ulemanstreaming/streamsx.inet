/* Copyright (C) 2013-2014, International Business Machines Corporation */
/* All Rights Reserved */

namespace com.ibm.streamsx.inet.ftp.sample;

use com.ibm.streamsx.inet.ftp::*;

/**
 * This sample demonstrates the usage of the telco FTP toolkit.
 * This sample uses the FTPReader operator and the FTPCommand operator.
 * It scans a remote directory and initiates file transfers for the found files.
 * Finally the transferred files are moved into an archive directory at the remote host.
 * The sample initiates a text file transfer for files with names \*.txt 
 * and the sample initiates a binary file transfer for files with names \*.bin.
 * The results a printed to stdout and in separate output text files.
 * @param protocol the transmission protocol
 * @param host the remote host name or IP address
 * @param path the remote path to a directory which stores some files to be transferred 
 * files with the extension .txt are handled as text files and files with extension .bin are transferred as binary files. In case of sftp protocol 
 * the path should be an absolute path. In all other cases the path depends on the server configuration.
 * @param username the remote user
 * @param password the password
 * @param verbosityDirScan the verbosity for the directory scan operator
 * @param verbosityTxtFile the verbosity for the text file transfer operator
 * @param verbosityBinFile the verbosity for the binary file transfer operator
 * @param verbosityCommand the verbosity for the command execution operator
 */
public composite RemoteDirScanAndGet {
	param
		expression<Protocol> $protocol : (Protocol)getSubmissionTimeValue("protocol", "ftp");
		expression<rstring> $host : getSubmissionTimeValue("host", "localhost");
		expression<rstring> $path : getSubmissionTimeValue("path", "/ftptry/");
		expression<rstring> $username : getSubmissionTimeValue("username", "username");
		expression<rstring> $password : getSubmissionTimeValue("password", "Test!pass");
		expression<boolean> $verbosityDirScan : (boolean)getSubmissionTimeValue("verbosityDirScan", "false");
		expression<boolean> $verbosityTxtFile : (boolean)getSubmissionTimeValue("verbosityTxtFile", "false");
		expression<boolean> $verbosityBinFile : (boolean)getSubmissionTimeValue("verbosityBinFile", "false");
		expression<boolean> $verbosityCommand : (boolean)getSubmissionTimeValue("verbosityCommand", "false");
		
	graph
	
	//provide a trigger stream for the ftp directory scan
	stream<int32 count> TriggerStream = Beacon() {
		param
			initDelay : 2.0;
			iterations : 2;
			period : 10.0;
		output TriggerStream : count = (int32)IterationCount();
		config placement : partitionColocation("DIR");
	}
	//scan the remote directory
	(
		stream<rstring fileName, uint64 size, rstring date, rstring user, boolean isFile, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred> FilenameStream as OUT;
		//stream<rstring error> ErrorStream
		stream<rstring errorText, int32 error, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred> ErrorStream as ERR
	) = FTPReader(TriggerStream) {
		param
			protocol : $protocol;
			isDirReader : true;
			host : $host;
			path : $path;
			username : $username;
			password : $password;
			useEPSV : false;
			curlVerbose : $verbosityDirScan;
		output
			OUT :
				fileName = FileName(),
				size = FileSize(),
				date = FileDate(),
				user = FileUser(),
				isFile = IsFile(),
				//transferCount = NoTransfers(),
				transferCount = TransferCount(),
				//failureCount =  NoTransferFailures(),
				failureCount = TransferFailureCount(),
				//bytesTransferred = NoBytesTransferred();
				bytesTransferred = BytesTransferred();
			ERR:
				errorText = ErrorText(),
				//error = Error(),
				error = ErrorCode(),
				//transferCount = NoTransfers(),
				transferCount = TransferCount(),
				//failureCount =  NoTransferFailures(),
				failureCount =  TransferFailureCount(),
				//bytesTransferred = NoBytesTransferred();
				bytesTransferred = BytesTransferred();
		config placement : partitionColocation("DIR");
	}
	//print the results
	() as DirTap = ResultSink(FilenameStream) {
		param
			file : "Dir.txt";
			loc : "DIRTAP";
	}
	() as ErrorTap = ResultSink(ErrorStream) {
		param
			file : "DirError.txt";
			loc : "DIRTAP";
	}
	
	//split in text and binary files
	stream<FilenameStream> FilenameStream2 = Filter(FilenameStream as IN) {
		param filter : IN.isFile && (spl.collection::size(regexMatch(IN.fileName, ".*txt")) > 0);
		config placement : partitionColocation("DIR");
	}
	stream<FilenameStream> FilenameStream3 = Filter(FilenameStream as IN) {
		param filter : IN.isFile && (spl.collection::size(regexMatch(IN.fileName, ".*bin")) > 0);
		config placement : partitionColocation("DIR");
	}

	//get the text files
	stream<rstring line, int32 sequence, rstring file, rstring url> FileStream as OUT = FTPReader(FilenameStream2 as IN) {
		param
			protocol : $protocol;
			isDirReader : false;
			host : $host;
			path : $path;
			filename : IN.fileName;
			username : $username;
			password : $password;
			connectionCloseMode : punct;
			curlVerbose : $verbosityTxtFile;
		output OUT :
			line = Line(),
			sequence = Sequence(),
			file = IN.fileName,
			url = Url();
		config placement : partitionColocation("TEXT");
	}
	//print the results
	() as TextTap = ResultSink(FileStream) {
		param
			file : "DataText.txt";
			loc : "TEXTTAP";
	}
	
	//prepare the command
	stream<rstring fileName> Sink = Custom (FileStream as IN) {
		logic state : mutable rstring theFile = "";
			onTuple IN : theFile = file;
			onPunct IN : {
				if (theFile != "") {
					submit({fileName=theFile}, Sink);
					theFile = "";
				}
			}
		config placement : partitionColocation("TEXT");
	}
	//get bin files
	stream<blob content, int32 sequence, rstring file, rstring url> BinFileStream as OUT = FTPReader(FilenameStream3 as IN) {
		param
			protocol : $protocol;
			host : $host;
			path : $path;
			filename : IN.fileName;
			username : $username;
			password : $password;
			connectionCloseMode : ever;
			curlVerbose : $verbosityBinFile;
		output OUT :
			content = Binary(),
			sequence = Sequence(),
			file = IN.fileName,
			url = Url();
		config placement : partitionColocation("BIN");
	}
	//print the results
	() as BinTap = ResultSink(BinFileStream) {
		param
			file : "DataBin.txt";
			loc : "BINTAP";
	}
	//prepare the command
	stream<rstring fileName> Sink2= Custom (BinFileStream as IN) {
		logic state : mutable rstring theFile = "";
			onTuple IN : theFile = file;
			onPunct IN : {
				if (theFile != "") {
					submit({fileName=theFile}, Sink2);
					theFile = "";
				}
			}
		config placement : partitionColocation("BIN");
	}
	
	//prepare command stream
	stream<rstring command, rstring file, rstring file2> CommandStream as OUT = Custom(Sink, Sink2 as IN) {
		logic state : mutable boolean first = true;
		onTuple IN : {
			if (first) {
				submit({command="pwd", file="", file2=""}, OUT);
				submit({command="mkdir", file= "archive", file2=""}, OUT);
				first = false;
			}
			submit({command="rename", file= fileName, file2= "archive/" + fileName}, OUT);
		}
		config placement : partitionColocation("MOVE");
	}
	//move the file into archive directory
	(
		stream<boolean success, rstring command, rstring fileName, rstring file2, uint32 transferCount, uint32 failureCount> ResultStream as OUT;
		//stream<rstring error> ResultErrorStream
		stream<rstring errorText, int32 error, uint32 transferCount, uint32 failureCount> ResultErrorStream as ERR
	) = FTPCommand(CommandStream as IN) {
		param
			protocol : $protocol;
			host : $host;
			path : $path;
			filename : IN.file;
			filenameTo : IN.file2;
			command : IN.command;
			username : $username;
			password : $password;
			connectionCloseMode : never;
			curlVerbose : $verbosityCommand;
		output
			OUT :
				fileName = IN.file,
				success = Success(),
				//transferCount = NoCommands(),
				transferCount = CommandCount(),
				//failureCount =  NoFailures();
				failureCount =  CommandFailureCount();
			ERR :
				errorText = ErrorText(),
				//error = Error(),
				error = ErrorCode(),
				//transferCount = NoTransfers(),
				transferCount = CommandCount(),
				//failureCount =  NoTransferFailures();
				failureCount = CommandFailureCount();
		config placement : partitionColocation("MOVE");
	}
	//print out the command and the time
	() as CommandTap= ResultSink(CommandStream) {
		param
			file : "Command.txt";
			loc : "MOVETAP1";
	}
	//print out the results and the time
	() as ResultTap= ResultSink(ResultStream) {
		param
			file : "CommandResult.txt";
			loc : "MOVETAP2";
	}
	() as ResultErrorTap= ResultSink(ResultErrorStream) {
		param
			file : "CommandError.txt";
			loc : "MOVETAP2";
	}
}

composite ResultSink (input IN) {
	param
		expression<rstring> $file;
		expression<rstring> $loc;
	graph
		stream<rstring info> TextToSave as Out = Custom(IN) {
			logic
				state : rstring file_ = $file;
				onTuple IN : {
					timestamp t = getTimestamp();
					rstring str = ctime(t) + " " + (rstring)getNanoseconds(t) + (rstring)IN;
					printStringLn(file_ + str);
					submit({info = str}, Out);
				}
				onPunct IN : {
					timestamp t = getTimestamp();
					rstring str = ctime(t) + " " + (rstring)getNanoseconds(t) + " " + (rstring)currentPunct();
					printStringLn(file_ + str);
					submit({info = str}, Out);
				}
			config placement : partitionColocation($loc);
		}
		() as Sink = FileSink(TextToSave) {
			param
				file : $file;
				format : txt;
				closeMode: never;
			config placement : partitionColocation($loc);
		}
}
