/* Copyright (C) 2013-2014, International Business Machines Corporation */
/* All Rights Reserved */

namespace com.ibm.streamsx.inet.ftp.sample;

use com.ibm.streamsx.inet.ftp::*;
use spl.file::*;

/**
 * This sample demonstrates the usage of the telco FTP toolkit.
 * This sample uses the FTPFupFile operator to put a file from the local file system to an FTP server. 
 * It scans the local directory and initiates file transfers for the found files. 
 * The file transfer starts with a temporary file name. After successful file transfer the file 
 * is re-named to the final name.
 * Finally the local files are removed/moved into an archive directory.
 * The results a printed to stdout.
 * @param protocol the transmission protocol
 * @param host the remote host name or IP address
 * @param path the remote path to a directory which will receive the transferred files.
 * In case of sftp protocol the path should be an absolute path. In all other cases the path depends on the server configuration.
 * @param username the remote user
 * @param password the password
 * @param verbosity the verbosity for the FTPPutFile operator
 */
public composite PutFile {
	param
		expression<Protocol> $protocol : (Protocol)getSubmissionTimeValue("protocol", "ftp");
		expression<rstring> $host : getSubmissionTimeValue("host", "localhost");
		expression<rstring> $path : getSubmissionTimeValue("path", "/ftptry/");
		expression<rstring> $username : getSubmissionTimeValue("username", "username");
		expression<rstring> $password : getSubmissionTimeValue("password", "Test!pass");
		expression<boolean> $verbosity : (boolean)getSubmissionTimeValue("verbosity", "false");
	
	graph
		
		//scan the input directoy
		stream<rstring path, rstring file> FilenameStream = DirectoryScan() {
			param
				directory: "./in";
				sleepTime : 30.0;
				pattern : ".*\\.txt";
			output FilenameStream :
				path = FullPath(),
				file = FileName();
			config placement : partitionColocation("FTPPUT");
		}
		
		//transfer the file to ftp server
		(
			stream<rstring lpath, rstring file, uint64 size, rstring url, boolean success, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred> ResultStream as OUT;
			stream<rstring errorText, int32 error, uint32 transferCount, uint32 failureCount, uint64 bytesTransferred> ErrorStream as ERR
		) = FTPPutFile(FilenameStream as IN) {
			param
				protocol : $protocol;
				host : $host;
				path : $path;
				username : $username;
				password : $password;
				localFilename : path;
				filename : "file.tmp";
				renameTo : file;
				sendStatisticsOnError : true;
				curlVerbose : $verbosity;
			output
				OUT :
					lpath = IN.path,
					size = FileSize(),
					url = Url(),
					success = Success(),
					//transferCount = NoTransfers(),
					transferCount = TransferCount(),
					//failureCount = NoTransferFailures(),
					failureCount = TransferFailureCount(),
					//bytesTransferred = NoBytesTransferred();
					bytesTransferred = BytesTransferred();
				ERR :
					errorText = ErrorText(),
					//error = Error(),
					error = ErrorCode(),
					//transferCount = NoTransfers(),
					transferCount = TransferCount(),
					//failureCount = NoTransferFailures(),
					failureCount = TransferFailureCount(),
					//bytesTransferred = NoBytesTransferred();
					bytesTransferred = BytesTransferred();
			config placement : partitionColocation("FTPPUT");
		}

		//print results
		() as ResultTap = ResultSink(ResultStream) {
			param
				file : "PutResult.txt";
				loc : "RESULTTAP1";
		}

		//print error
		() as ErrorTap = ResultSink(ErrorStream) {
			param
				file : "PutError.txt";
				loc : "ERRORTAP1";
		}

		//move local files
		stream<rstring localMoveResult, tuple<I> result> FileMoverStream as O = Custom(ResultStream as I) {
			logic
				//state : boolean dirOk = createDir("./move/");
				onTuple I : {
					if (success) {
						mutable int32 err = 0;
						//rename(lpath, "./move/"+file, err);
						remove(lpath, err);
						mutable rstring r = "success";
						if (0 != err) r = "ERROR: can not remame file err=" + (rstring)err;
						submit({localMoveResult = r, result = I}, O);
					} else {
						submit({localMoveResult = "", result = I}, O);
					}
				}
				onPunct I : {
					if (currentPunct() == Sys.WindowMarker) {
						submit(Sys.WindowMarker, O);
					}
				}
			config placement : partitionColocation("FTPPUT");
		}
		//print results
		() as Tap = ResultSink(FileMoverStream) {
			param
				file : "Result.txt";
				loc : "MOVETAP1";
		}
}

composite ResultSink (input IN) {
	param
		expression<rstring> $file;
		expression<rstring> $loc;
	graph
		stream<rstring info> TextToSave as Out = Custom(IN) {
			logic
				state : rstring file_ = $file;
				onTuple IN : {
					timestamp t = getTimestamp();
					rstring str = ctime(t) + " " + (rstring)getNanoseconds(t) + (rstring)IN;
					printStringLn(file_ + str);
					submit({info = str}, Out);
				}
				onPunct IN : {
					timestamp t = getTimestamp();
					rstring str = ctime(t) + " " + (rstring)getNanoseconds(t) + " " + (rstring)currentPunct();
					printStringLn(file_ + str);
					submit({info = str}, Out);
				}
			config placement : partitionColocation($loc);
		}
		() as Sink = FileSink(TextToSave) {
			param
				file : $file;
				format : txt;
				closeMode: never;
			config placement : partitionColocation($loc);
		}
}

