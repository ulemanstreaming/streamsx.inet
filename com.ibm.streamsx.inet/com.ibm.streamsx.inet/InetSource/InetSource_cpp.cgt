<%
# Copyright (C) 2010,2012-2016, International Business Machines Corporation. 
# All Rights Reserved.
%>
<%SPL::CodeGen::implementationPrologue($model);%>

<%
  my $ccContext = $model->getContext()->getOptionalContext("ConsistentRegion");
  if (defined $ccContext) {
    SPL::CodeGen::exitln("The following operator is not supported in a consistent region: InetSource.");
  }
  
  # get the output port object
  my $oport = $model->getOutputPortAt(0);

  # the data fetched from URLs will be assigned to the first output attribute
  my $dataAttributeName = $oport->getAttributeAt(0)->getName();
  my $dataAttributeType = $oport->getAttributeAt(0)->getSPLType();

  # the URLs themselves will be assigned to the second output attribute, if there is one
  my $urlAttributeName = $oport->getNumberOfAttributes()>1 ? $oport->getAttributeAt(1)->getName() : undef;
  my $urlAttributeType = $oport->getNumberOfAttributes()>1 ? $oport->getAttributeAt(1)->getSPLType() : undef;

  # the type of the first attribute in the output tuple must be either 'rstring', 'list<rstring>', 'blob', or 'xml'
  SPL::CodeGen::exit("sorry, output attribute '$dataAttributeName' must be of type 'rstring' or 'list<rstring>' or 'blob' or 'xml', not '$dataAttributeType'") unless $dataAttributeType eq "rstring" || $dataAttributeType eq "list<rstring>" || $dataAttributeType eq "blob" || $dataAttributeType eq "xml";

  # the type of the second attribute in the output tuple must be 'rstring', if it is specified at all
  SPL::CodeGen::exit("sorry, output attribute '$urlAttributeName' must be of type 'rstring', not '$dataAttributeType'") if $urlAttributeName && $urlAttributeType ne "rstring";

  # we will handle the data attribute in the output tuple differently depending upon its type
  my $dataAttributeIsString = 0;   
  my $dataAttributeIsList = 0;
  my $dataAttributeIsBlob = 0;
  my $dataAttributeIsXML = 0;

  # create a variable to hold the parameters as I get them
  my $parameter = "";
  my $initDelay = $model->getParameterByName("initDelay");
  my $incrementalFetch = $model->getParameterByName("incrementalFetch");
  my $doNotStreamInitialFetch = $model->getParameterByName("doNotStreamInitialFetch");
  my $unconditionalFetch = $model->getParameterByName("unconditionalFetch");
  my $emitTuplePerFetch = $model->getParameterByName("emitTuplePerFetch");
  my $emitTuplePerURI = $model->getParameterByName("emitTuplePerURI");
  my $emitTuplePerRecordCount = $model->getParameterByName("emitTuplePerRecordCount");

  # consistency checks for boolean parameters, based on type of data attribute in output tuple
  if ($dataAttributeType eq "list<rstring>")
  {
    $dataAttributeIsList = 1;
    if(!($emitTuplePerFetch) && !($emitTuplePerURI) && !($emitTuplePerRecordCount))
    {
      $emitTuplePerFetch = 1;
    } else {
      if($emitTuplePerFetch) { $emitTuplePerFetch = ($emitTuplePerFetch->getValueAt(0)->getSPLExpression() eq 'true')?1:0; }
      if($emitTuplePerURI) { $emitTuplePerURI = ($emitTuplePerURI->getValueAt(0)->getSPLExpression() eq 'true')?1:0; }
    }
  }
  elsif ($dataAttributeType eq "rstring")
  {
    $dataAttributeIsString = 1;
    my $value = $emitTuplePerRecordCount ? $emitTuplePerRecordCount->getValueAt(0)->getSPLExpression() : 1;
    # scalar attributes in output tuple
    if(($emitTuplePerFetch) || ($emitTuplePerURI))
    {
      SPL::CodeGen::exit("The emitTuplePerFetch and emitTuplePerURI parameters are valid only for attributes of type 'list<rstring>', not '$dataAttributeType'");
    }
    elsif ($value > 1)
    {
      SPL::CodeGen::exit("Values of the 'emitTuplePerRecordCount' parameter greater than one are valid only for attributes of type 'list<rstring>', not '$value'");
    }
  }
  elsif ($dataAttributeType eq "blob")
  {
    $dataAttributeIsBlob = 1;
  }
  elsif ($dataAttributeType eq "xml")
  {
    $dataAttributeIsXML = 1;
  }


  if($initDelay)
  {
    $initDelay = $initDelay->getValueAt(0)->getCppExpression();
  }
  if($incrementalFetch)
  {
    $incrementalFetch = $incrementalFetch->getValueAt(0)->getCppExpression();
  }
  if($doNotStreamInitialFetch)
  {
    $doNotStreamInitialFetch = ($doNotStreamInitialFetch->getValueAt(0)->getSPLExpression() eq 'true')?1:0;
  }
  if($unconditionalFetch)
  {
    $unconditionalFetch = $unconditionalFetch->getValueAt(0)->getCppExpression();
  }
%>

#include <iostream>
#include <string>
#include <sstream>
#include <cassert>
#include <cerrno>
#include <fstream>
#include <iomanip>
#include <getopt.h>
#include <sys/socket.h>
#include <netdb.h>
using namespace std;

#include <streams_boost/algorithm/string.hpp>
using namespace streams_boost;


#include <limits.h>
#include <stdlib.h>

@include "InetRetrieverCpp.cgt";
@include "URIHelperCpp.cgt";


// This macro wraps the specified line of 'code' in an 'if' block that executes
// only if the application's tracing level is at least as high as the specified 'level'.
// Note that this macro should be defined in '.../system/impl/include/TRC/DistilleryDebug.h'
// or '.../include/SPL/Runtime/Common/RuntimeDebug.h'.

#define SPLAPPTRC_CODE(level, code) do { \
  int ilvl = Distillery::debug::EXTERNAL_DEBUG_LEVEL_MAP_TO_INTERNAL[level]; \
  if ( __builtin_expect( (ilvl <= Distillery::debug::app_trace_level) , 0 ) ) \
  { \
    code ; \
  } \
} while(0)


MY_OPERATOR::MY_OPERATOR()
  : MY_BASE_OPERATOR(), 
    relFileProtocol("file:///"),
    absFileProtocol("file:////"),
    retrievers_(),
    retCodeCounts_(),
    inputLinesPerRecord_(<%=(($parameter = $model->getParameterByName("inputLinesPerRecord"))?SPL::CodeGen::getParameterCppInitializer($parameter):1)%>), 
    intraRecordPadValue_(<%=(($parameter = $model->getParameterByName("intraRecordPadValue"))?SPL::CodeGen::getParameterCppInitializer($parameter):"\" \"")%>), 
    fetchInterval_(<%=(($parameter = $model->getParameterByName("fetchInterval"))?SPL::CodeGen::getParameterCppInitializer($parameter):600.0)%>), 
    punctPerFetch_(<%=(($parameter = $model->getParameterByName("punctPerFetch"))?SPL::CodeGen::getParameterCppInitializer($parameter):'false')%>), 
    iterations_(<%=(($parameter = $model->getParameterByName("iterations"))?SPL::CodeGen::getParameterCppInitializer($parameter):0)%>), 
    iteration_(0), 
<% if($dataAttributeIsList) { %>
    emitTuplePerRecordCount_(<%=($emitTuplePerRecordCount?SPL::CodeGen::getParameterCppInitializer($emitTuplePerRecordCount):0),%>),
<% } else { %>
    emitTuplePerRecordCount_(1),
<% } %>
   dynamicURL_(<%=($model->getParameterByName("URIList")->getValueAt(0)->hasSideEffects()?"true":"false")%>)
{

}

void MY_OPERATOR::addRetriever(const std::string&  iURI) {

      SPLAPPTRC(L_DEBUG, "Using '" << iURI << "' as an input URI...","InetSource");

      // allocate a curl object for this URL
      InetRetriever* retriever = new InetRetriever(iURI);

      // enable tracing in curl object if this operator is tracing
      SPLAPPTRC_CODE( L_TRACE, retriever->enableCurlTrace() );

<% if($incrementalFetch) { %>
      retriever->incrementalFetch(<%=$incrementalFetch%>);
<% } %>
<% if($unconditionalFetch) { %>
      retriever->ignoreLastModTime(<%=$unconditionalFetch%>);
<% } %>
      std::pair<int, uint32_t> retcodeCount (0, 0);
      retrievers_.push_back(retriever);
      retCodeCounts_.push_back(retcodeCount);
     
}

std::string MY_OPERATOR::checkURI(const std::string & iURI) {
    URIHelper uri;
    try
    {
      // Ensure that the URI is correctly formatted
      uri.init(iURI);
    }
    catch(DistilleryException& e) 
    {
      // Malformed input URI -- issue message and shut down the PE
      SPL::rstring msg = INET_MALFORMED_URI(iURI);
      SPLAPPLOG(L_ERROR, msg, "InetSource");
      SPL::Functions::Utility::shutdownPE();
    }
    catch(std::exception& e) 
    {
      // Malformed input URI -- issue message and shut down the PE
      SPL::rstring msg = INET_MALFORMED_URI(iURI);
      SPLAPPLOG(L_ERROR, msg, "InetSource");
      SPL::Functions::Utility::shutdownPE();
    }

    if((iURI.compare(0, 8, relFileProtocol) == 0) && (iURI.compare(0, 9, absFileProtocol) != 0))
    // The URI was declared as a relative path/filename (relative to the PE's data directory).
    // Compute the absolute path/filename and assign it back to iURI. 
    {
      string iFileName;
      iFileName.assign(uri.getPath());
      trim(iFileName);

      // get the real path (i.e. resolve any symlinks to actual filename)
      char* rp = new char[PATH_MAX+1];
      memset(rp, 0x00, PATH_MAX+1);

      string rn;
      if(realpath(iFileName.c_str(), rp))
      {
        rn = string(rp);
      }
      delete [] rp;

      string inputFileName;
      if(iFileName == rn)
      {
        inputFileName = rn;
      }
      else
      {
        inputFileName.append(getPE().getDataDirectory());
        inputFileName.append("/").append(iFileName);
      }

      std::string newURI(relFileProtocol);
      newURI.append(inputFileName);
      return newURI;
    }
    else {
        return iURI;
    }
}

MY_OPERATOR::~MY_OPERATOR() 
{
  for(std::size_t i = 0; i < retrievers_.size(); i++)
  {
    InetRetriever* retriever = retrievers_.at(i);
    delete retriever;
  }
}

void MY_OPERATOR::allPortsReady() 
{
  createThreads(1); // for now, single-threaded only
}
 
void MY_OPERATOR::prepareToShutdown() 
{
  SPLAPPTRC(L_DEBUG, "Shutdown Request event received by PE " << getContext().getName(), "InetSource");
}

void MY_OPERATOR::process(uint32_t idx)
{
  SPLAPPTRC(L_DEBUG, "Processing...", "InetSource");

  OPort0Type tuple;
  std::string fetchContent; // content fetched from URL
  std::istringstream fetchBuffer; // buffer of content fetched from URL

<% if($doNotStreamInitialFetch) { %>
  // do not emit tuples for initial fetch
  bool initialFetch = true;
<% } %>

<% if($dataAttributeIsList) { %>
  // internal buffer for accumulating lines for output records
  SPL::list<SPL::rstring> recordBuffer;
  int recordCounter = 0;
<% } %>

<% if($initDelay) { %>
  // initial delay
  getPE().blockUntilShutdownRequest(<%=$initDelay%>);
<% } %>
  
  bool firstTime = true;
  while(!getPE().getShutdownRequested())
  {

    if (dynamicURL_ || firstTime) {
    firstTime = false;
         SPL::list<SPL::rstring> newURI = <%=($model->getParameterByName("URIList")->getValueAt(0)->getCppExpression())%>; 
	// delete retrievers we won't need.
	while (retrievers_.size() > newURI.size()) {
	      	// save it so we can delete it.
		InetRetriever* last = retrievers_.back();
		retrievers_.erase(retrievers_.end() -1, retrievers_.end());
		retCodeCounts_.erase(retCodeCounts_.end() -1, retCodeCounts_.end());
		delete last;	
	}

       // If there's a retriever, re-use it.
        for (std::size_t i = 0; i < retrievers_.size() ; i++)  {
            if (retrievers_.at(i)->updateURL(checkURI(newURI.at(i)))) {
             SPLAPPTRC(L_INFO, "URL " << i << " updated to " << retrievers_.at(i)->targetURL(), "InetSource");
            }
            else {
                SPLAPPTRC(L_DEBUG,"URL " << i << " re-evaluated, but is unchanged ", "InetSource");
            }
        } // end -- check URLs in list of 'retrievers' 

	// here we need to add a retriever.
	for (std::size_t i = retrievers_.size(); i < newURI.size(); i++) {
	    addRetriever(checkURI(newURI.at(i)));
	}
    } // end -- if 'dynamicURL_' or 'firstTime'

    // now fetch content from each 'retriever' and emit zero or more tuples containing its data
    for(std::size_t i = 0; i < retrievers_.size() && !getPE().getShutdownRequested(); i++)
    {

      // point at the next 'retriever' object
      InetRetriever* retriever = retrievers_.at(i);
      SPLAPPTRC(L_TRACE, "getting URL " << retriever->targetURL() << " ...","InetSource");

      // fetch content from this URL 
      try
      {
        fetchContent = retriever->fetch();
      }
      catch(CURLcode rc)
      {
        std::pair<int,uint32_t> & retcodeCount = retCodeCounts_.at(i);
        // Keep track of how many times in a row a given retriever has issued the same return code
        // This avoids filling up the log with repetitive messages.
        if (retcodeCount.first == rc)
        {
          (retcodeCount.second)++;
        }
        else
        {
          retcodeCount.first = rc;
          retcodeCount.second = 1;
        }
        
        SPL::rstring msg;
        if (retcodeCount.second < 10)
        {
          msg = INET_NONZERO_LIBCURL_RC(retriever->targetURL(), rc, string(curl_easy_strerror(rc)));
          SPLAPPLOG(L_WARN, msg, "InetSource");
        }
        else if (retCodeCounts_.at(i).second % 10 == 0) {
          msg = INET_NONZERO_LIBCURL_RC_REPEATED(retriever->targetURL(), rc, string(curl_easy_strerror(rc)), retcodeCount.second);
          SPLAPPLOG(L_WARN, msg, "InetSource");
        }
        continue;
      }

      SPLAPPTRC(L_TRACE, "got " << fetchContent.length() << " bytes from URL " << retriever->targetURL() << " ...","InetSource");

<% if($doNotStreamInitialFetch) { %>
      // if we don't want the initial fetch and we are on that fetch, skip the output
      if(!initialFetch)
      {
<% } %>


<% if ($dataAttributeIsString || $dataAttributeIsList) { %>
        /*
         * Split retrieval buffer into separate "input records", each record containing
         * "inputlinesPerRecord" lines from the original file, separated by the "intraRecordPadValue"
         * value (default pad value is a single blank char)
         */
        
        // load fetched content into an 'std::istringstream' buffer, from which it will be parsed into lines

        fetchBuffer.clear(); // also clears eof bit
        fetchBuffer.str(fetchContent);

        // Start of loop here, one loop cycle per input record, until retrieval buffer is exhausted

          while(!fetchBuffer.eof())  {
              string record;
              getline(fetchBuffer,record);
      
              // if there's no data left, we should exit this loop
              if(fetchBuffer.eof() && record.size() == 0) {
                 break;
              }

           if(inputLinesPerRecord_ > 1)
            {
              /*
               * Here, the user asked for multiple lines per record, so append the contents of the additional
               * lines, interspersing a pad value before each append.  (Note, a value less than 1 means
               * "put all lines in a single record.")
               */
              string line;
              for(int lc=1; lc<inputLinesPerRecord_ && !fetchBuffer.eof(); ++lc)
              {
                getline(fetchBuffer, line);
                if(line.size() > 0 && !fetchBuffer.eof())
                {
                  if(record.size() > 0)  // append the pad value if and only if the previous line had content
                  {
                    record.append(intraRecordPadValue_);
                  }
                  record.append(line);
                }
              }
            }
            else if(inputLinesPerRecord_ == 0)
            {
              string line;
              while(!fetchBuffer.eof())
              {
                getline(fetchBuffer, line);
                if(line.size() > 0)
                {
                  if(record.size() > 0)  // append the pad value if and only if the previous line had content
                  {
                    record.append(intraRecordPadValue_);
                  }
                  record.append(line);
                }
              }
            }
    
            // Now that the record has been formed, do the following:
    
            /*
             * (** Note, additional function planned here to parse the record into multiple pieces, and assign
             * each piece to an attribute of the output stream tuple. **)
             */
    
<% if($dataAttributeIsList) { %>
            /*
             * Here, the output attribute is a list<rstring>, so append the record to the end of
             * the internal buffer we're building.  (Don't submit it yet though.)
             * If the resulting attribute would exceed 2^31-1 in length, fragment it into
             * multiple list members each 2^31-1 or less in length.  (This is to avoid
             * the SPL limit of 2^31 - 1 on string size in tuples.)
             */
            while(true)
            {
              string limitStr = record.substr(0, 2147483647); // gets entire record if size < 2^31-1
              recordBuffer.add(limitStr);
              if(limitStr.size() < record.size()) // did fragmentation occur?
              {
                record = record.substr(limitStr.size());
              }
              else break;// when there is no fragmentation, we are done
            }
            ++recordCounter;
  
            if(emitTuplePerRecordCount_ > 0)
            {
              /*
               * Here, emitTuplePerRecordCount was requested, so test to see if the record count is
               * large enough for us to emit a tuple.  If it is, then assign the internal list
               * buffer(s) to its(their) corresponding tuple attribute(s) and then submit the tuple.
               * Clear the internal list buffer(s) and reset the tuple counter.
               */
              if(recordCounter >= emitTuplePerRecordCount_ && recordBuffer.size() > 0)
              {
                tuple.clear();
                tuple.set_<%=$dataAttributeName%>(recordBuffer);
                <% print("tuple.set_$urlAttributeName(retriever->targetURL());\n") if $urlAttributeName; %>
                SPLAPPTRC(L_DEBUG, "Submitting output tuple with 'list<rstring>' data attribute" << tuple, "InetSource");
                submit(tuple, 0);
                recordBuffer.clear();
                recordCounter = 0;
              }
            }
<% } elsif ($dataAttributeIsString) { # end -- if data attribute is list of strings %>
            /*
             * Here, the output attribute is a rstring, so assign the record to the rstring tuple
             * attribute and submit the tuple.  If the resulting attribute would exceed 2^31-1 in
             * length, fragment it into multiple tuples each 2^31-1 or less in length.  (This is to avoid
             * the SPL limit of (2^31 - 1) on string size in tuples.)
             */
            while(true)
            {
              tuple.clear();
              string limitStr = record.substr(0, 2147483647); // gets entire record if size < 2^31-1
              tuple.set_<%=$dataAttributeName%>(limitStr);
              <% print("tuple.set_$urlAttributeName(retriever->targetURL());\n") if $urlAttributeName; %>
              SPLAPPTRC(L_DEBUG, "Submitting output tuple with 'rstring' data attribute " << tuple, "InetSource");
              submit(tuple, 0);
              if(limitStr.size() < record.size()) // did fragmentation occur?
              {
                record = record.substr(limitStr.size());
              }
              else break; // when there is no fragmentation, we are done
            }
<% } # end -- if data attribute is string %>

          } // end -- split fetched content into records


<% if($dataAttributeIsList && $emitTuplePerURI) { %>
        /*
         * Here, emitTuplePerURI was requested, so flush the internal list buffer(s) into its(their)
         * corresponding tuple attribute(s) and then submit the tuple if nonempty.
         */
        if(recordBuffer.size() > 0)
        {
          tuple.clear();
          tuple.set_<%=$dataAttributeName%>(recordBuffer);
          <% print("tuple.set_$urlAttributeName(retriever->targetURL());\n") if $urlAttributeName; %>
          SPLAPPTRC(L_DEBUG, "Submitting output tuple with 'list<rstring>' data attribute" << tuple, "InetSource");
          submit(tuple, 0);
          recordBuffer.clear();
          recordCounter = 0;
        } // end -- test for non-empty buffer
<% } %>

<% } elsif ($dataAttributeIsBlob) { # end -- if data attribute is string or list of strings %>

          /*
           * Here the data attribute is a blob, so the entire content fetched from the 'retriever'
           * is assigned to the attribute and submitted.
          */
          tuple.clear();
          tuple.set_<%=$dataAttributeName%>( SPL::blob( (const unsigned char*)fetchContent.c_str(), fetchContent.length() ) );
          <% print("tuple.set_$urlAttributeName( retriever->targetURL() );\n") if $urlAttributeName; %>
          SPLAPPTRC(L_DEBUG, "Submitting output tuple with 'blob' data attribute " << tuple, "InetSource");
          submit(tuple, 0);

<% } elsif ($dataAttributeIsXML) { # end -- if data attribute is blob %>

          /*
           * Here the data attribute is XML, so the entire content fetched from the 'retriever'
           * is converted to XML, assigned to the attribute, and submitted. Note that XML
           * conversion exceptions are caught and logged, and the tuple discarded without
           * emitting any output.
          */
          try {
            tuple.clear();
            tuple.set_<%=$dataAttributeName%>( SPL::xml( "", fetchContent.c_str(), fetchContent.length() ) );
            <% print("tuple.set_$urlAttributeName( retriever->targetURL() );\n") if $urlAttributeName; %>
            SPLAPPTRC(L_DEBUG, "Submitting output tuple with 'xml' data attribute " << tuple, "InetSource");
            submit(tuple, 0);
          } catch (const SPL::SPLRuntimeException& e) {
            SPLLOG(L_ERROR, "discarded XML data from " << retriever->targetURL() << " due to " << e.what() << ", " << e.getExplanation(), "InetSource");
          }

<% } # end -- if data attribute is xml %>


<% if($doNotStreamInitialFetch) { %>
      }
<% } %>

    } // end -- fetch content from list of 'retrievers'


<% if($doNotStreamInitialFetch) { %>
    // if we don't want the initial fetch and we are on that fetch, skip the output
    if(!initialFetch)
    {
<% } %>

<% if($dataAttributeIsList && $emitTuplePerFetch) { %>
      /*
       * emitTuplePerFetch was requested -- so flush the internal list buffer(s) into its(their)
       * corresponding tuple attribute(s) and then submit the tuple.
       */
      if(recordBuffer.size() > 0)
      {
        tuple.clear();
        tuple.set_<%=$dataAttributeName%>(recordBuffer);
        <% print("tuple.set_$urlAttributeName(retriever->targetURL());\n") if $urlAttributeName; %>
        SPLAPPTRC(L_DEBUG, "Submitting output tuple " << tuple, "InetSource");
        submit(tuple, 0);
        recordBuffer.clear();
        recordCounter = 0;
      }
<% } %>
    
    if(punctPerFetch_) {
      // punctPerFetch was requested -- so emit a punctuation here
      submit(Punctuation::WindowMarker, 0);
    }

<% if($doNotStreamInitialFetch) { %>
    }
    else
    {
      // It was the initial fetch...so clear the flag for subsequent fetches
      initialFetch = false;
    }
<% } %>

    // if we are not iterating endlessly, increment iteration counter and break out of loop when limit is reached
    if ( iterations_ != 0 && ++iteration_ >= iterations_ ) break;

    // Now pause until it is time to perform the next fetch
    SPLAPPTRC(L_DEBUG, "waiting " << fetchInterval_ << " seconds before repeating fetches", "InetSource");
    getPE().blockUntilShutdownRequest(fetchInterval_);

  } // end -- while !getPE().getShutdownRequested()


  // emit final punctuation after last fetch iteration
  submit(Punctuation::FinalMarker, 0);

  SPLAPPTRC(L_DEBUG, "Processing complete", "InetSource");
}

<%SPL::CodeGen::implementationEpilogue($model);%>

